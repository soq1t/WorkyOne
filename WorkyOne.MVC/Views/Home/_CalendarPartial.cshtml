@using WorkyOne.AppServices.Interfaces.Services.Schedule.Common
@using WorkyOne.AppServices.Interfaces.Services
@using WorkyOne.AppServices.Interfaces.Utilities
@using WorkyOne.MVC.Models.Schedule

@model CalendarViewModel
@inject ICalendarService calendarService
@inject IColorUtility colorUtility
@inject IDateTimeService dateTimeService

<div class="calendar__body">
    <div class="calendar__header">
        <div data-year="@Model.Info.Year" data-month="@Model.Info.MonthNumber" class="monthSelector">
            <span data-dir="back" class="monthSelector__arrow material-symbols-outlined">arrow_back</span>
            <div class="monthSelector__info">
                <p class="month">@Model.Info.MonthName</p>
                <p class="year">@Model.Info.Year</p>
            </div>
            <span data-dir="forward" id="selector__arrow--right" class="monthSelector__arrow material-symbols-outlined">arrow_forward</span>
        </div>
    </div>
    <div class="calendar__main">
        @{
            var calendarInfo = Model.Info;
            var date = calendarInfo.Start;

            var weekDayNames = calendarService.GetWeekdaysNames();
            <div class="calendar__row">
                @foreach (var day in weekDayNames)
                {
                    <div class="dayWeekName row__item">@day.ToUpper()</div>
                }
            </div>

            while (date <= calendarInfo.End)
            {
                <div class="calendar__row">
                @for (int i = 1; i <= 7; i++)
                {
                    var dailyInfo = Model.WorkGraphic?.FirstOrDefault(x => x.Date == date);
                    var now = DateOnly.FromDateTime(dateTimeService.GetNow());

                    var classes = "day";

                    if (date.Month != Model.Info.MonthNumber)
                    {
                        classes += " day--inactive";
                    }

                    if (now.DayNumber == date.DayNumber)
                    {
                        classes += " day--today";
                    }
                    var color = $"background-color: {colorUtility.GetRgbaFromHex(dailyInfo?.ColorCode, 0.8)}; color: {colorUtility.GetForegroundColor(dailyInfo?.ColorCode)}";

                    <div class="row__item">
                        <div style="@color" class="calendar__day @classes">
                            <div class="day__title">
                                <div class="day__number">@date.Day</div>
                                @*<div class="day__name">@dailyInfo?.Name.ToUpper()[0]</div>*@
                            </div>                            
                            <div class="day__body">
                                <div class="day__section">@dailyInfo?.Beginning</div>
                                <div class="day__section">@dailyInfo?.Ending</div>
                            </div>                        
                        </div>
                    </div>                   
                    
                    date = date.AddDays(1);                        
                }
                </div>                
            }

        }
    </div>
    <div class="calendar__footer">
        @{
            if (Model.WorkGraphic != null)
            {
                var colorPairs = new Dictionary<string, string>();

                foreach (var day in Model.WorkGraphic)
                {
                    if (!colorPairs.ContainsKey(day.Name))
                    {
                        colorPairs.Add(day.Name, day.ColorCode);
                    }
                }

                <div class="calendar__legend legend">
                    @foreach(var pair in colorPairs)
                    {
                        <div class="legend__item">
                            <div style="background-color: @pair.Value" class="legend__color"></div>
                            <div class="legend__name">@pair.Key</div>
                        </div>
                    }
                </div>
                
            }
        }        
    </div>
</div>